-- -------------------------------------------------------------
-- 
-- File Name: tp_vivado\hdlsrc\main\Subsystem.vhd
-- Created: 2022-12-09 14:11:09
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- a_b                           ce_out        1e-08
-- dato_wr_ad                    ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: main/Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        alpha500hz_50khz                  :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        rxd                               :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        a_b                               :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        dato_wr_ad                        :   OUT   std_logic
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Component Declarations
  COMPONENT detector_flancos
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rxd                             :   IN    std_logic;  -- ufix1
          flanco                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rconversor_uart_uint
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pulsos                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          pulsos_2                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          RXD                             :   IN    std_logic;  -- ufix1
          flanco                          :   IN    std_logic;
          Fin                             :   OUT   std_logic;
          Salida                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT detector_flancos1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rxd                             :   IN    std_logic;
          flanco                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT contador_mem_wr
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sumar                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          salida                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT reloj_sicnronizador
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable_Input                    :   IN    std_logic;
          Threshold                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          muestras_max                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          pulsos                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT contador_mem_rd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sumar                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          salida                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT generador_pulsos_ad
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rd_dout                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          dato_wr_ad                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : detector_flancos
    USE ENTITY work.detector_flancos(rtl);

  FOR ALL : rconversor_uart_uint
    USE ENTITY work.rconversor_uart_uint(rtl);

  FOR ALL : detector_flancos1
    USE ENTITY work.detector_flancos1(rtl);

  FOR ALL : contador_mem_wr
    USE ENTITY work.contador_mem_wr(rtl);

  FOR ALL : reloj_sicnronizador
    USE ENTITY work.reloj_sicnronizador(rtl);

  FOR ALL : contador_mem_rd
    USE ENTITY work.contador_mem_rd(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  FOR ALL : generador_pulsos_ad
    USE ENTITY work.generador_pulsos_ad(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL detector_flancos_out1            : std_logic;
  SIGNAL Fin                              : std_logic;
  SIGNAL Salida                           : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL detector_flancos1_out1           : std_logic;
  SIGNAL salida_1                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_en                            : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant8_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant6_out1                   : std_logic;
  SIGNAL Constant7_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch1_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant3_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL clock_pulsos                     : std_logic;
  SIGNAL TmpGroundAtcontador_mem_rdInport2_out1 : std_logic;
  SIGNAL Constant4_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL salida_2                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL memoria_out                      : std_logic_vector(7 DOWNTO 0);  -- ufix8

BEGIN
  -- 50KHZ
  -- 500HZ

  u_detector_flancos : detector_flancos
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              rxd => rxd,  -- ufix1
              flanco => detector_flancos_out1
              );

  u_rconversor_uart_uint : rconversor_uart_uint
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              pulsos => std_logic_vector(Constant_out1),  -- uint16
              pulsos_2 => std_logic_vector(Constant1_out1),  -- uint16
              RXD => rxd,  -- ufix1
              flanco => detector_flancos_out1,
              Fin => Fin,
              Salida => Salida  -- uint8
              );

  u_detector_flancos1 : detector_flancos1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              rxd => Fin,
              flanco => detector_flancos1_out1
              );

  u_contador_mem_wr : contador_mem_wr
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              sumar => detector_flancos1_out1,
              reset_1 => reset_1,
              salida => salida_1  -- uint8
              );

  u_reloj_sicnronizador : reloj_sicnronizador
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Enable_Input => Constant6_out1,
              Threshold => std_logic_vector(Switch1_out1),  -- uint32
              muestras_max => std_logic_vector(Constant3_out1),  -- uint32
              pulsos => clock_pulsos
              );

  u_contador_mem_rd : contador_mem_rd
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              sumar => clock_pulsos,
              reset_1 => TmpGroundAtcontador_mem_rdInport2_out1,
              max => std_logic_vector(Constant4_out1),  -- uint8
              salida => salida_2  -- uint8
              );

  u_Simple_Dual_Port_RAM : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => Salida,
              wr_addr => salida_1,
              wr_en => wr_en,
              rd_addr => salida_2,
              rd_dout => memoria_out
              );

  u_generador_pulsos_ad : generador_pulsos_ad
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              rd_dout => salida_2,  -- uint8
              dato_wr_ad => dato_wr_ad
              );

  Constant_out1 <= to_unsigned(16#0364#, 16);

  Constant1_out1 <= to_unsigned(16#01B2#, 16);

  enb <= clk_enable;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wr_en <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wr_en <= detector_flancos1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  switch_compare_1 <= '1' WHEN alpha500hz_50khz > '0' ELSE
      '0';

  Constant8_out1 <= to_unsigned(1999, 32);

  Constant6_out1 <= '1';

  Constant7_out1 <= to_unsigned(199999, 32);

  
  Switch1_out1 <= Constant8_out1 WHEN switch_compare_1 = '0' ELSE
      Constant7_out1;

  Constant3_out1 <= to_unsigned(200, 32);

  TmpGroundAtcontador_mem_rdInport2_out1 <= '0';

  Constant4_out1 <= to_unsigned(16#C7#, 8);

  ce_out <= clk_enable;

  a_b <= memoria_out;

END rtl;

